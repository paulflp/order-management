package Presentation;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Date;
import java.util.Calendar;

import javax.rmi.CORBA.UtilDelegate;
import javax.swing.JOptionPane;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.mysql.cj.util.Util;

import BLL.ClientBLL;
import BLL.EmployeeBLL;
import BLL.OrderBLL;
import BLL.ProductBLL;
import BLL.Validators.Validator;
import Model.Client;
import Model.Employee;
import Model.Order;
import Model.Product;

/**
 * Clasa Controller pentru GUI pentru comenzi
 * 
 * @author user
 *
 */
public class OrderController {
	private static int ORDER_NUMBER = 0;
	private OrderView view;
	private OrderBLL orderBLL;

	public OrderController(OrderView view) {
		this.view = view;
		orderBLL = new OrderBLL();

		view.addGenerateListener(new GenerateListener());
		view.addClearListener(new ClearListener());
	}

	class GenerateListener implements ActionListener {

		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			int clientId = view.getUserInputClientId();
			int productId = view.getUserInputProductId();
			int employeeId = view.getUserInputEmployeeId();
			int quantity = view.getUserInputQuantity();
			java.sql.Date currDate = new java.sql.Date(Calendar.getInstance().getTime().getTime());
			Order newOrder = new Order(clientId, productId, quantity, currDate, employeeId);
			try {
				for (Validator<Order> val : orderBLL.getValidators()) {
					val.validate(newOrder);
				}
				ProductBLL productBLL = new ProductBLL();
				Product prd = productBLL.findProducttById(productId);
				prd.setQuantity(prd.getQuantity() - quantity);
				productBLL.updateProductById(productId, prd);
				orderBLL.insert(newOrder);
			} catch (IllegalArgumentException er) {
				JOptionPane.showMessageDialog(null, er.getMessage());
				return;
			}
			ORDER_NUMBER++;
			Document document = new Document();
			try {
				PdfWriter.getInstance(document, new FileOutputStream("Order" + ORDER_NUMBER + ".pdf"));
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (DocumentException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			ClientBLL cltBLL = new ClientBLL();
			EmployeeBLL emplBLL = new EmployeeBLL();
			ProductBLL productBLL = new ProductBLL();

			Product prd = productBLL.findProducttById(productId);
			Client client = cltBLL.findClientById(clientId);
			Employee employee = emplBLL.getEmployeeById(employeeId);
			document.open();
			com.itextpdf.text.Font font = FontFactory.getFont(FontFactory.COURIER, 16, BaseColor.BLACK);
			Paragraph chunk = new Paragraph("Client: " + client.getName() + "\nProduct: " + prd.getName()
					+ "\nQuantity: " + quantity + "\nGenerated by: " + employee.getName() + "\nDate: "
					+ currDate.toString() + "\nTotal: " + quantity * prd.getPrice(), font);

			try {
				document.add(chunk);
			} catch (DocumentException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			document.close();
		}

	}

	class ClearListener implements ActionListener {

		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			view.reset();
		}

	}
}
